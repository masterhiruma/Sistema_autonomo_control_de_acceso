# -*- mode: python ; coding: utf-8 -*-

block_cipher = None

# Archivos de datos necesarios
a = Analysis(
    ['main_app.py'],
    pathex=[],
    binaries=[],
    datas=[
        ('config.json', '.'),
        ('sistema_acceso.db', '.'),
        ('constants.py', '.'),
        ('db_manager.py', '.'),
        ('facial_recognition_utils.py', '.'),
        ('gui_manager.py', '.'),
        ('state_machine_logic.py', '.'),
        ('arduino_comms.py', '.'),
        ('reporting_logging.py', '.'),
        ('validation_logic.py', '.'),
        ('buscar_camaras.py', '.'),
        ('global_state.py', '.'),
        ('requirements.txt', '.'),
        ('file_version_info.txt', '.'),
        # Carpetas necesarias
        ('rostros_conocidos', 'rostros_conocidos'),
        ('reportes_acceso', 'reportes_acceso'),
        # Modelos faciales necesarios para face_recognition
        ('temp_face_models/face_recognition_models-master/face_recognition_models/models/shape_predictor_68_face_landmarks.dat', 'face_recognition_models/models'),
        ('temp_face_models/face_recognition_models-master/face_recognition_models/models/shape_predictor_5_face_landmarks.dat', 'face_recognition_models/models'),
        ('temp_face_models/face_recognition_models-master/face_recognition_models/models/dlib_face_recognition_resnet_model_v1.dat', 'face_recognition_models/models'),
        ('temp_face_models/face_recognition_models-master/face_recognition_models/models/mmod_human_face_detector.dat', 'face_recognition_models/models'),
    ],
    hiddenimports=[
        'cv2',
        'face_recognition',
        'face_recognition_models',
        'numpy',
        'serial',
        'serial.tools.list_ports',
        'tkinter',
        'tkinter.ttk',
        'tkinter.messagebox',
        'tkinter.simpledialog',
        'PIL',
        'PIL.Image',
        'PIL.ImageTk',
        'sqlite3',
        'json',
        'csv',
        'datetime',
        'threading',
        'time',
        'os',
        'sys',
        'pickle',
        're',
        'enum',
        'pyzbar',
        'pyzbar.pyzbar',
        'shutil',
        'constants',
        'arduino_comms',
        'state_machine_logic',
        'db_manager',
        'reporting_logging',
        'facial_recognition_utils',
        'gui_manager',
        'validation_logic',
        'buscar_camaras',
        'global_state',
    ],
    hookspath=[],
    hooksconfig={},
    runtime_hooks=[],
    excludes=[
        'matplotlib',
        'scipy',
        'pandas',
        'jax',
        'jaxlib',
        'tensorflow',
        'torch',
        'sklearn',
        'sounddevice',
        'mediapipe',
        'google',
        'absl',
        'flatbuffers',
        'ml_dtypes',
        'opt_einsum',
        'sentencepiece',
        'fontTools',
        'contourpy',
        'cycler',
        'dateutil',
        'kiwisolver',
        'packaging',
        'pyparsing',
        'pytz',
        'six',
        'threadpoolctl',
        'tzdata',
        'joblib',
        'mpl_toolkits',
    ],
    win_no_prefer_redirects=False,
    win_private_assemblies=False,
    cipher=block_cipher,
    noarchive=False,
)

pyz = PYZ(a.pure, a.zipped_data, cipher=block_cipher)

exe = EXE(
    pyz,
    a.scripts,
    a.binaries,
    a.zipfiles,
    a.datas,
    [],
    name='ControlAcceso',
    debug=False,
    bootloader_ignore_signals=False,
    strip=False,
    upx=True,
    upx_exclude=[],
    runtime_tmpdir=None,
    console=False,
    disable_windowed_traceback=False,
    argv_emulation=False,
    target_arch=None,
    codesign_identity=None,
    entitlements_file=None,
    version='file_version_info.txt',
    icon=None,
)